namespace ibeosdk{
/*! \page migrationguide Migration Guide
 \tableofcontents

  \section sec_migration Migration Guide

  \subsection sec_migration_table Notable Migration Steps For SDK Version 6

<table><tr><th colspan="1"><br/></th><th>old</th><th>new</th></tr><tr><th colspan="1">Includes</th><td colspan="1"><pre>&lt;ibeosdk/...&gt;</pre></td><td colspan="1"><pre>&lt;ibeo/common/sdk/...&gt;</pre></td></tr><tr><th colspan="1">Namespaces</th><td colspan="1"><pre>ibeosdk::</pre></td><td colspan="1"><pre>ibeo::common::sdk::</pre></td></tr><tr><th rowspan="2">MountingPosition</th><td><pre>ibeosdk::MountingPosition()</pre></td><td><pre>ibeo::sdk::ibeosdk::MountingPosition&lt;float&gt;()</pre></td></tr><tr><td><pre>setYawAngle() / getYawAngle()</pre><pre>setPitchAngle() / getPitchAngle()</pre><pre>setRollAngle() / getRollAngle()</pre></td><td><pre>getYaw() / setYaw()</pre><pre>setPitch() / getPitch()</pre><pre>setRoll() / getRoll()</pre></td></tr><tr><th rowspan="3">TimeRecord</th><td><pre>&lt;ibeosdk/datablocks/TimeRecord9000.hpp&gt;</pre></td><td><pre>&lt;ibeosdk/datablocks/timerecord/TimeRecord9000.hpp&gt;</pre></td></tr><tr><td colspan="1"><pre>ibeosdk::TimeRecord9000::Fix_3D</pre></td><td colspan="1"><pre>common::sdk::TimeRecord9000::FixMode::Fix3D</pre></td></tr><tr><td colspan="1"><pre>timeRecord.setAll(...)</pre></td><td colspan="1"><pre>timeRecord.setTimesAndFixeModes(...)</pre></td></tr><tr><th colspan="1">DataTypeId</th><td><pre>ibeosdk::DataTypeId::DataType_IdcTrailer</pre><pre>ibeosdk::DataTypeId::DataType_FrameIndex</pre><pre>ibeosdk::DataTypeId::DataType_LuxScan</pre><pre>ibeosdk::DataTypeId::DataType_EcuScan</pre><pre>ibeosdk::DataTypeId::DataType_Image</pre><pre>ibeosdk::DataTypeId::DataType_EcuVehicleStateBasic2808</pre><pre>ibeosdk::DataTypeId::DataType_Notification</pre><pre>ibeosdk::DataTypeId::DataType_LuxObjectList</pre><pre>ibeosdk::DataTypeId::DataType_LuxVehicleStateBasic</pre></td><td><pre>common::sdk::DataTypeId::DataType_IdcTrailer6120</pre><pre>common::sdk::DataTypeId::DataType_FrameIndex6130</pre><pre>common::sdk::DataTypeId::DataType_Scan2202</pre><pre>common::sdk::DataTypeId::DataType_Scan2205</pre><pre>common::sdk::DataTypeId::DataType_Image2403</pre><pre>common::sdk::DataTypeId::DataType_VehicleStateBasic2808</pre><pre>common::sdk::DataTypeId::DataType_Notification2030</pre><pre>common::sdk::DataTypeId::DataType_ObjectList2221</pre><pre>common::sdk::DataTypeId::DataType_VehicleStateBasic2805</pre></td></tr><tr><th colspan="1">Image</th><td><pre>ibeosdk::Image::JPEG</pre></td><td><pre>common::sdk::image::ImageFormat::Jpeg</pre></td></tr><tr><th colspan="1">ClockType</th><td><pre>ibeosdk::ClockType::ClockName::Clock_User</pre><pre>ibeosdk::ClockType::ClockName::Clock_GpsImu</pre><pre>ibeosdk::ClockType::ClockName::Clock_ECU</pre></td><td><pre>common::sdk::ClockType::ClockName::Other</pre><pre>common::sdk::ClockType::ClockName::GpsImu</pre><pre>common::sdk::ClockType::ClockName::Ecu</pre></td></tr><tr><th colspan="1">VehicleState</th><td><pre>VehicleStateBasicEcu2808</pre><pre>vehicleStateBasicEcu2808.setVehicleVelocity(...)</pre><pre>vehicleStateBasicEcu2808.getVehicleVelocity(...)</pre></td><td><pre>VehicleState2808</pre><pre>vehicleState2808.setLongitudinalVelocity(...)<br/>vehicleState2808.getLongitudinalVelocity(...)</pre></td></tr></table>

  \subsection sec_migration_dc Data Container Refactoring

  General data containers now exist for every type of data. Specializations implement data types for devices. Data Snippets share implementation details between implementations.

  \subsubsection sec_scan_gdc Scan

  The following table gives an overview of the current container types and snippets used for scans and the new structure.

    <table>
    <tr>
    <th/><th>Scan (general)</th><th>Scan2202 (LUX)</th><th>Scan2205 (ECU)</th><th>Scan2208 (miniLUX)</th><th>Scan2209 (ECU)</th><th>ScalaFpgaRawData2310 (Scala) &rarr; Scan2310</th>
    </tr>
    <tr>
    <th>Point snippet type</th><td>ScanPointEcu &rarr; ScanPoint (using ScanPointIn2205)</td><td>ScanPointLux &rarr; ScanPointIn2202</td><td>ScanPointEcu &rarr; ScanPointIn2205</td><td>SubScan2208 &rarr; SubScanIn2208 ScanPoint2208 &rarr; ScanPointIn2208</td><td>ScanPointEcu &rarr; ScanPointIn2209 (using ScanPointIn2205)</td><td>ScalaFpgaRawScanPoint &rarr; ScanPointIn2310</td>
    </tr>
    <tr><th>Scanner info snippet type</th><td>ScannerInfo (using ScannerInfoIn2205) ResolutionInfo (using ResolutionInfoIn2205)</td><td/><td>ScannerInfo &rarr; ScannerInfoIn2205 ResolutionInfo &rarr; ResolutionInfoIn2205</td><td/><td>ScannerInfo &rarr; ScannerInfoIn2209 (using ScannerInfoIn2205) ResolutionInfo &rarr; ResolutionInfoIn2209 (using ResolutionInfoIn2205)</td><td/>
    </tr>
    <tr>
    <th>Other snippet types</th><td/><td/><td/><td>MountingPosition<int16_t> &rarr; MountingPositionIn2208 (using MountingPosition<int16_t>)</td><td/><td>ScalaFpgaRawData &rarr; move functionality to Scan2310 ScalaFpgaRawHeader &rarr; ScanHeaderIn2310 ScalaFpgaRawInfo &rarr; ScanInfoIn2310 ScalaFpgaRawSegInfo &rarr; ScanSegInfoIn2310 ScalaFpgaRawScanPointBase &rarr; ScanPointBaseIn2310 ScalaFpgaRawScanPoint &rarr; ScanPointIn2310 ScalaFpgaRawDiagPulse &rarr; ScanPointDiagPulseIn2310 ScalaFpgaRawRefScan &rarr; ScanPointRefScanIn2310 ScalaFpgaRawTrailer &rarr; ScanTrailerIn2310</td>
    </tr>
    </table>


  \subsubsection sec_carriageway_gdc Carriageway

    The following diagram shows an overview about the currently implemented hierarchy of carriage way classes.

  \image html Refactor_data_container_snippets_lanes.png

  The following table gives an overview of the current container types and snippets used for carriage ways and the new structure.

    <table>
    <tr>
    <th/>
    <th>CarriageWay (general)</th><th>CarriageWay6970</th><th>CarriageWay6972</th>
    </tr>
    <tr>
    <td>CarriageWayListxxxx</td><td>CarriageWayList (using CarriageWayList6972)</td><td>CarriageWayList6970</td><td>CarriageWayList6972</td>
    </tr>
    <tr><td>CarriageWayListInxxxx</td><td/><td>CarriageWayListIn6970 &rarr; move functionality to CarriageWayList6970</td><td>CarriageWayListIn6972 &rarr; move functionality to CarriageWayList6972</td>
    </tr>
    <tr>
    <td>CarriageWayInxxxx</td><td>CarriageWay (using CarriageWayIn6972)</td><td>CarriageWayIn6970 (using CarriageWayInTemplate<LaneSegmentIn6970>)</td><td>CarriageWayIn6972 (using CarriageWayInTemplate<LaneSegmentIn6972>)</td>
    </tr>
    <tr>
    <td>CarriageWaySegmentInxxxx</td><td>CarriageWaySegment (using CarriageWaySegmentIn6972)</td><td>CarriageWaySegmentIn6970 (using CarriageWaySegmentInTemplate<LaneSegmentIn6970>)</td><td>CarriageWaySegmentIn6972 (using CarriageWaySegmentInTemplate<LaneSegmentIn6972>)</td>
    </tr>
    <tr>
    <td>LaneInxxxx</td><td>Lane (using LaneIn6972)</td><td>LaneIn6970 (using LaneInTemplate<LaneSegmentIn6970>)</td><td>LaneIn6972 (using LaneInTemplate<LaneSegmentIn6972>)</td>
    </tr>
    <tr>
    <td>LaneSegmentInxxxx</td><td>LaneSegment (using LaneSegmentIn6972)</td><td>LaneSegmentIn6970</td><td>LaneSegmentIn6972</td>
    </tr>
    <tr>
    <td>LaneSupportPoint</td><td>LaneSupportPoint (using LaneSupportPoint6972)</td><td>LaneSupportPoint6970</td><td>LaneSupportPoint6972 (using LaneSupportPoint6970)</td>
    </tr>
    </table>


  \subsubsection sec_objectlist_gdc ObjectList

  The following table gives an overview of the current container types and snippets used for object lists and the new structure (in bold and italic).

  <table>
    <tr>
	<th/><th>ObjectList(general)</th><th>ObjectList2221 (LUX)</th><th>ObjectList2225 (ECU)</th><th>ObjectList2270 (LUX145/Audi)</th><th>ObjectList2271 (Scala)</th><th>ObjectList2280 (ECU)</th><th>ObjectList2281 (ECU)</th><th>ObjectList2290 (ECU)</th><th>ObjectList2291 (ECU)</th>
    </tr>
    <tr><th>Object type</th><td>Object</td><td>ObjectLux &rarr; ObjectIn2221</td><td>ObjectEcu &rarr; ObjectIn2225</td><td>ObjectScala &rarr; ObjectIn2270</td><td>ObjectScala2271 &rarr; ObjectIn2271</td><td>ObjectEcuEt &rarr; ObjectIn2280</td><td>ObjectEcuEtDyn &rarr; ObjectIn2281</td><td>ObjectEcuEt &rarr; ObjectIn2290 (using ObjectIn2280)</td><td>ObjectEcuEtDyn &rarr; ObjectIn2291 (using ObjectIn2281)</td>
    </tr>
    <tr><th>Point type</th><td>ContourPoint</td><td>Vector2<int16_t></td><td>Vector2<float></td><td>Vector2<int16_t></td><td>ContourPointCm &rarr; ContourPointIn2271</td><td>Vector2<float></td><td>Vector2<float></td><td>Vector2<float></td><td>Vector2<float></td>
    </tr>
    <tr>
    <th>Other snippet types</th><td>UnfilteredObjectData</td><td/><td/><td/><td>UnfilteredObjectAttributesCm &rarr; UnfilteredObjectDataIn2271 FilteredObjectAttributesCm &rarr; FilteredObjectDataIn2271</td><td/><td/><td/><td/>
    </tr>
  </table>
	
  The classes MeasurementList and Measurement (as snippet in ObjectList, ObjectList2281, and ObjectList2291) are shared with other data containers and thus not changed.

  </table>

  The classes MeasurementList and Measurement (as snippet in ObjectList, ObjectList2281, and ObjectList2291) are shared with other data containers and thus not changed during this refactoring. After refactoring the other data containers they should be moved into the common types folder. Nevertheless, serialization and deserialization of these classes in the context of object lists will be implemented during this refactoring.

  \subsubsection sec_pointcloud_gdc PointCloud

  Each data container has a number of points that are different in how they store the coordinates: the GlobalPoint uses GPS coordinates for every point while the PlanePoint uses x,y,z coordinates as offsets to a reference point. Iterator together with proxy classes are used to give a common representation of the points. This allows a fast access because the coordinates are not transformed beforehand but only if the point is read. But as the data container PointCloudGlobal7500 is very rarely used, it was decided to abandon the iterators in the point cloud classes and directly return the point vector instead. The classes will be renamed in the new structure (in bold and italic) according to the following table. Additionally, a new general data container PointCloud together with im- and exporters for data type ID 7510 (plane point cloud) will be implemented.

  \image html Refactor_data_container_snippets_pointcloud.png

    <table><tr><th></th><th>PointCloud (general)</th><th>PointCloudGlobal7500 &rarr; PointCloud7500</th><th>PointCloudPlane7510 &rarr; PointCloud7510</th></tr>
    <tr><th>Point type</th><td>PointCloudPoint</td><td>GlobalPoint &rarr; PointCloudPoint7500</td><td>PlanePoint &rarr; PointCloudPoint7510</td></tr>
    </table>
 */
}
